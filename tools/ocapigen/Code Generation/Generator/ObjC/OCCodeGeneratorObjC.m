//
//  OCCodeGeneratorObjC.m
//  ocapigen
//
//  Created by Felix Schwarz on 27.01.22.
//  Copyright © 2022 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2022, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

#import "OCCodeGeneratorObjC.h"

@implementation OCCodeGeneratorObjC

- (NSDictionary<OCCodeRawType,OCCodeNativeType> *)rawToNativeTypeMap
{
	return (@{
		@"array" 		: @"NSArray",
		@"object"		: @"NSDictionary",
		@"string" 		: @"NSString",
		@"string:date-time" 	: @"NSDate",
		@"integer" 		: @"NSNumber",
		@"boolean" 		: @"NSNumber",
	});
}

- (NSDictionary<OCCodeRawPropertyName,OCCodeNativePropertyName> *)rawToNativePropertyNameMap
{
	return (@{
		@"id" 		: @"identifier",
		@"description"	: @"desc"
	});
}

- (BOOL)nativeTypesUseCamelCase
{
	return (YES);
}

- (NSString *)nativeTypesPrefix
{
	return (@"GA");
}

- (OCCodeNativeType)collectionTypeFor:(OCCodeNativeType)collectionType itemType:(OCCodeNativeType)itemType asReference:(BOOL)asReference inFile:(OCCodeFile *)file
{
	return ([NSString stringWithFormat:@"%@<%@ *>%@", collectionType, itemType, (asReference ? @"*" : @"")]);
}

- (OCCodeNativeType)nativeTypeForProperty:(OCSchemaProperty *)property asReference:(BOOL)asReference remappedFrom:(OCCodeNativeType  _Nullable __autoreleasing * _Nullable)outRemappedFrom inSegment:(nullable OCCodeFileSegment *)fileSegment
{
	NSString *type = nil;

	if ([property.name hasSuffix:@"Url"])
	{
		type = @"NSURL";
	}

	if (asReference)
	{
		type = [type stringByAppendingString:@" *"];
	}

	if (type != nil)
	{
		return (type);
	}

	return ([super nativeTypeForProperty:property asReference:asReference remappedFrom:outRemappedFrom inSegment:fileSegment]);
}

- (OCCodeNativeType)nativeTypeForRAWType:(OCCodeRawType)rawType rawFormat:(OCCodeRawFormat)rawFormat rawItemType:(OCCodeRawType)rawItemType asReference:(BOOL)asReference inSegment:(nullable OCCodeFileSegment *)fileSegment
{
	OCCodeNativeType nativeType;

	if ((nativeType = [super nativeTypeForRAWType:rawType rawFormat:rawFormat rawItemType:rawItemType asReference:asReference inSegment:fileSegment]) != nil)
	{
		if (asReference && ![nativeType hasSuffix:@"*"])
		{
			nativeType = [nativeType stringByAppendingString:@" *"];
		}
	}

	return (nativeType);
}


- (NSString *)commentForProperty:(OCSchemaProperty *)property ofSchema:(OCSchema *)schema
{
	NSString *comment = nil;

	if (property.desc != nil)
	{
		comment = property.desc;
	}

	if ([property.type isEqual:@"integer"] || [property.type isEqual:@"boolean"] || (property.format != nil))
	{
		if (comment != nil)
		{
			comment = [NSString stringWithFormat:@"[%@%@] %@", property.type, ((property.format != nil) ? [@":" stringByAppendingString:property.format] : @""), comment];
		}
		else
		{
			comment = [NSString stringWithFormat:@"[%@%@]", property.type, ((property.format != nil) ? [@":" stringByAppendingString:property.format] : @"")];
		}
	}

	if (property.pattern != nil)
	{
		comment = [comment stringByAppendingFormat:@" | pattern: %@", property.pattern];
	}

	return (comment);
}

- (void)addCopyrightHeaderToSegment:(OCCodeFileSegment *)segment
{
	[segment addLine:@"//"];
	[segment addLine:@"// %@", segment.file.url.lastPathComponent];
	[segment addLine:@"// Autogenerated / Managed by ocapigen"];
	[segment addLine:@"// Copyright (C) %@ ownCloud GmbH. All rights reserved.", @(2022)];
	[segment addLine:@"//"];
	[segment addLine:@""];
	[segment addLine:@"/*"];
	[segment addLine:@" * Copyright (C) 2022, ownCloud GmbH."];
	[segment addLine:@" *"];
	[segment addLine:@" * This code is covered by the GNU Public License Version 3."];
	[segment addLine:@" *"];
	[segment addLine:@" * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/"];
	[segment addLine:@" * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>."];
	[segment addLine:@" *"];
	[segment addLine:@" */"];
	[segment addLine:@""];
}

- (void)generateForSchema:(OCSchema *)schema
{
	NSString *className = [self nativeTypeNameForSchema:schema inSegment:nil];
	OCCodeFileSegment *segment = nil, *forwardDeclarationsSegment = nil, *headerPropertiesSegment = nil;
	NSMutableSet <NSString *> *forwardDeclaredTypeNames = [NSMutableSet new];

	// ##
	// ## Header file
	// ##

	NSString *headerFileName = [className stringByAppendingString:@".h"];
	OCCodeFile *headerFile = [self fileForName:headerFileName];

	// Lead comment
	segment = [[headerFile segmentForName:OCCodeFileSegmentNameLeadComment] clear];
	[self addCopyrightHeaderToSegment:segment];

	// Includes
	segment = [[headerFile segmentForName:OCCodeFileSegmentNameIncludes after:segment] clear];

	[segment addLine:@"#import <Foundation/Foundation.h>"];
	[segment addLine:@"#import \"GAGraphObject.h\""];

	// Forward declarations (prepare)
	forwardDeclarationsSegment = [[headerFile segmentForName:OCCodeFileSegmentNameForwardDeclarations after:segment] clear];

	// @interface …
	segment = [[headerFile segmentForName:OCCodeFileSegmentNameTypeLeadIn after:forwardDeclarationsSegment] clear];


	[segment addLine:@"NS_ASSUME_NONNULL_BEGIN"];
	[segment addLine:@"@interface %@ : NSObject <GAGraphObject, NSSecureCoding>", className];

	// Properties
	headerPropertiesSegment = [[headerFile segmentForName:OCCodeFileSegmentNameTypeProperties after:segment] clear];

	for (OCSchemaProperty *property in schema.properties)
	{
		NSString *comment = [self commentForProperty:property ofSchema:schema];
		NSString *propertyClassNameOriginal = nil;
		NSString *propertyClassName = [self nativeTypeForProperty:property asReference:NO remappedFrom:&propertyClassNameOriginal inSegment:headerPropertiesSegment];
		NSString *propertyTypeOriginal = nil;
		NSString *propertyType = [self nativeTypeForProperty:property asReference:YES remappedFrom:&propertyTypeOriginal inSegment:headerPropertiesSegment];
		NSString *propertyName = [self nativeNameForProperty:property inSegment:headerPropertiesSegment];

		comment = ((comment != nil) ? [NSString stringWithFormat:@" //!< %@", comment] : @"");

		[headerPropertiesSegment addLine:@"@property(strong%@) %@%@%@;%@",
			(property.required ? @"" : @", nullable"),
			propertyType,
			([propertyType containsString:@" "] ? @"" : @" "),
			propertyName,
			comment
		];

		if (![propertyType hasPrefix:@"NS"])
		{
			if (propertyTypeOriginal != nil)
			{
				[forwardDeclarationsSegment addLine:@"typedef %@ %@;", propertyTypeOriginal, propertyClassName];
			}
			else
			{
				[forwardDeclaredTypeNames addObject:propertyClassName];
			}
		}
		else if (property.isCollection)
		{
			OCCodeNativeType propertClassName = [self nativeTypeForRAWType:property.itemType rawFormat:nil rawItemType:nil asReference:NO inSegment:segment];

			if (![propertClassName hasPrefix:@"NS"])
			{
				[forwardDeclaredTypeNames addObject:propertClassName];
			}
		}
	}

	// Protected
	segment = [[headerFile segmentForName:OCCodeFileSegmentNameTypeProtected after:headerPropertiesSegment] clear];
	segment.locked = YES;

	// Forward declarations (render)
	NSArray<NSString *> *forwardDeclaredTypeNamesSorted = [forwardDeclaredTypeNames.allObjects sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];
	if (forwardDeclarationsSegment != nil)
	{
		for (NSString *typeName in forwardDeclaredTypeNamesSorted)
		{
			[forwardDeclarationsSegment addLine:@"@class %@;", typeName];
		}
	}

	// @end (class)
	segment = [headerFile segmentForName:OCCodeFileSegmentNameTypeLeadOut after:segment];
	[segment clear];
	[segment addLine:@"@end"];
	[segment addLine:@"NS_ASSUME_NONNULL_END"];

	// ##
	// ## Implementation file
	// ##

	NSString *implementationFileName = [className stringByAppendingString:@".m"];
	NSMutableString *debugDescriptionStringFormat = [NSMutableString new], *debugDescriptionStringContent = [NSMutableString new];
	OCCodeFile *implementationFile = [self fileForName:implementationFileName];
	OCCodeFileSegment *nativeSerializationSegment = nil, *nativeDeserializationSegment = nil, *debugDescriptionSegment = nil;

	// Lead comment
	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameLeadComment] clear];
	[self addCopyrightHeaderToSegment:segment];

	// Includes
	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameIncludes after:segment] clear];

	[segment addLine:@"#import \"%@\"", headerFileName];
	for (NSString *typeName in forwardDeclaredTypeNamesSorted)
	{
		[segment addLine:@"#import \"%@.h\"", typeName];
	}

	// Implementation lead-in
	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeLeadIn after:segment] clear];
	[segment addLine:@"@implementation %@", className];

	// Implementation serialization
	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeSerialization after:segment] clear];
	nativeDeserializationSegment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeNativeDeserialization after:segment] clear];
	nativeSerializationSegment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeNativeSerialization after:nativeDeserializationSegment] clear];
	debugDescriptionSegment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeDebugDescription after:nativeSerializationSegment] clear];

	[segment addLine:@"+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError"];
	[segment addLine:@"{"];
	[segment addLine:@"	%@ *instance = [self new];", className];
	[segment addLine:@""];

	[nativeDeserializationSegment addLine:@"+ (BOOL)supportsSecureCoding"];
	[nativeDeserializationSegment addLine:@"{"];
	[nativeDeserializationSegment addLine:@"	return (YES);"];
	[nativeDeserializationSegment addLine:@"}"];
	[nativeDeserializationSegment addLine:@""];
	[nativeDeserializationSegment addLine:@"- (instancetype)initWithCoder:(NSCoder *)decoder"];
	[nativeDeserializationSegment addLine:@"{"];
	[nativeDeserializationSegment addLine:@"	if ((self = [super init]) != nil)"];
	[nativeDeserializationSegment addLine:@"	{"];

	[nativeSerializationSegment addLine:@"- (void)encodeWithCoder:(NSCoder *)coder"];
	[nativeSerializationSegment addLine:@"{"];

	for (OCSchemaProperty *property in schema.properties)
	{
		NSString *comment = [self commentForProperty:property ofSchema:schema];
		NSString *propertyClassName = [self nativeTypeForProperty:property asReference:NO remappedFrom:NULL inSegment:segment];
		NSString *propertyName = [self nativeNameForProperty:property inSegment:segment];
		NSString *collectionType = @"Nil";

		// JSON -> properties mapping
		comment = ((comment != nil) ? [NSString stringWithFormat:@" //!< %@", comment] : @"");

		if (property.isCollection)
		{
			collectionType = [[self nativeTypeForRAWType:property.type rawFormat:nil rawItemType:nil asReference:NO inSegment:segment] stringByAppendingString:@".class"];
			propertyClassName = [self nativeTypeForRAWType:property.itemType rawFormat:nil rawItemType:nil asReference:NO inSegment:segment];
		}

		if ([property.name isEqual:propertyName])
		{
			if (property.required)
			{
				[segment addLine:@"	GA_SET_REQ(%@, %@, %@);", property.name, propertyClassName, collectionType];
			}
			else
			{
				[segment addLine:@"	GA_SET(%@, %@, %@);", property.name, propertyClassName, collectionType];
			}
		}
		else
		{
			if (property.required)
			{
				[segment addLine:@"	GA_MAP_REQ(%@, \"%@\", %@, %@);", propertyName, property.name, propertyClassName, collectionType];
			}
			else
			{
				[segment addLine:@"	GA_MAP(%@, \"%@\", %@, %@);", propertyName, property.name, propertyClassName, collectionType];
			}
		}

		// Secure Coding deserialization
		if ([collectionType isEqual:@"Nil"])
		{
			[nativeDeserializationSegment addLine:@"		_%@ = [decoder decodeObjectOfClass:%@.class forKey:@\"%@\"];", propertyName, propertyClassName, propertyName];
		}
		else
		{
			[nativeDeserializationSegment addLine:@"		_%@ = [decoder decodeObjectOfClasses:[NSSet setWithObjects: %@.class, %@, nil] forKey:@\"%@\"];", propertyName, propertyClassName, collectionType, propertyName];
		}

		// Secure Coding serialization
		[nativeSerializationSegment addLine:@"	[coder encodeObject:_%@ forKey:@\"%@\"];", propertyName, propertyName];

		// Debug description
		[debugDescriptionStringFormat appendString:@"\%@"];
		[debugDescriptionStringContent appendFormat:@", ((_%@!=nil) ? [NSString stringWithFormat:@\", %@: %%@\", _%@] : @\"\")", propertyName, propertyName, propertyName];
	}
	[segment addLine:@""];
	[segment addLine:@"	return (instance);"];
	[segment addLine:@"}"];

	[nativeDeserializationSegment addLine:@"	}"];
	[nativeDeserializationSegment addLine:@""];
	[nativeDeserializationSegment addLine:@"	return (self);"];
	[nativeDeserializationSegment addLine:@"}"];

	[nativeSerializationSegment addLine:@"}"];

	[debugDescriptionSegment addLine:@"- (NSString *)description"];
	[debugDescriptionSegment addLine:@"{"];
	[debugDescriptionSegment addLine:@"	return ([NSString stringWithFormat:@\"<%%@: %%p%@>\", NSStringFromClass(self.class), self%@]);", debugDescriptionStringFormat, debugDescriptionStringContent];
	[debugDescriptionSegment addLine:@"}"];

	// Protected
	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeProtected after:debugDescriptionSegment] clear];
	segment.locked = YES;

	segment = [[implementationFile segmentForName:OCCodeFileSegmentNameTypeLeadOut after:segment] clear];
	[segment addLine:@"@end"];
}

@end
