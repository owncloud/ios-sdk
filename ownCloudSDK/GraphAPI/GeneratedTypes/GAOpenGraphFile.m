//
// GAOpenGraphFile.m
// Autogenerated / Managed by ocapigen
// Copyright (C) 2022 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2022, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

// occgen: includes
#import "GAOpenGraphFile.h"
#import "GAHashes.h"

// occgen: type start
@implementation GAOpenGraphFile

// occgen: type serialization
+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GAOpenGraphFile *instance = [self new];

	GA_SET(hashes, GAHashes, Nil);
	GA_SET(mimeType, NSString, Nil);
	GA_SET(processingMetadata, NSNumber, Nil);

	return (instance);
}

// occgen: type native deserialization
+ (BOOL)supportsSecureCoding
{
	return (YES);
}

- (instancetype)initWithCoder:(NSCoder *)decoder
{
	if ((self = [super init]) != nil)
	{
		_hashes = [decoder decodeObjectOfClass:GAHashes.class forKey:@"hashes"];
		_mimeType = [decoder decodeObjectOfClass:NSString.class forKey:@"mimeType"];
		_processingMetadata = [decoder decodeObjectOfClass:NSNumber.class forKey:@"processingMetadata"];
	}

	return (self);
}

// occgen: type native serialization
- (void)encodeWithCoder:(NSCoder *)coder
{
	[coder encodeObject:_hashes forKey:@"hashes"];
	[coder encodeObject:_mimeType forKey:@"mimeType"];
	[coder encodeObject:_processingMetadata forKey:@"processingMetadata"];
}

// occgen: type debug description
- (NSString *)description
{
	return ([NSString stringWithFormat:@"<%@: %p%@%@%@>", NSStringFromClass(self.class), self, ((_hashes!=nil) ? [NSString stringWithFormat:@", hashes: %@", _hashes] : @""), ((_mimeType!=nil) ? [NSString stringWithFormat:@", mimeType: %@", _mimeType] : @""), ((_processingMetadata!=nil) ? [NSString stringWithFormat:@", processingMetadata: %@", _processingMetadata] : @"")]);
}

// occgen: type protected {"locked":true}


// occgen: type end
@end

