//
// GADriveItemCreateLink.m
// Autogenerated / Managed by ocapigen
// Copyright (C) 2024 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2024, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

// occgen: includes
#import "GADriveItemCreateLink.h"

// occgen: type start
@implementation GADriveItemCreateLink

// occgen: type serialization
+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GADriveItemCreateLink *instance = [self new];

	GA_SET(type, NSString, Nil);
	GA_SET(expirationDateTime, NSDate, Nil);
	GA_SET(password, NSString, Nil);
	GA_SET(displayName, NSString, Nil);
	GA_MAP(libreGraphQuickLink, "@libre.graph.quickLink", NSNumber, Nil);

	return (instance);
}

// occgen: struct serialization
- (nullable GAGraphStruct)encodeToGraphStructWithContext:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GA_ENC_INIT
	GA_ENC_ADD(_type, "type", NO);
	GA_ENC_ADD(_expirationDateTime, "expirationDateTime", NO);
	GA_ENC_ADD(_password, "password", NO);
	GA_ENC_ADD(_displayName, "displayName", NO);
	GA_ENC_ADD(_libreGraphQuickLink, "@libre.graph.quickLink", NO);
	GA_ENC_RETURN
}

// occgen: type native deserialization
+ (BOOL)supportsSecureCoding
{
	return (YES);
}

- (instancetype)initWithCoder:(NSCoder *)decoder
{
	if ((self = [super init]) != nil)
	{
		_type = [decoder decodeObjectOfClass:NSString.class forKey:@"type"];
		_expirationDateTime = [decoder decodeObjectOfClass:NSDate.class forKey:@"expirationDateTime"];
		_password = [decoder decodeObjectOfClass:NSString.class forKey:@"password"];
		_displayName = [decoder decodeObjectOfClass:NSString.class forKey:@"displayName"];
		_libreGraphQuickLink = [decoder decodeObjectOfClass:NSNumber.class forKey:@"libreGraphQuickLink"];
	}

	return (self);
}

// occgen: type native serialization
- (void)encodeWithCoder:(NSCoder *)coder
{
	[coder encodeObject:_type forKey:@"type"];
	[coder encodeObject:_expirationDateTime forKey:@"expirationDateTime"];
	[coder encodeObject:_password forKey:@"password"];
	[coder encodeObject:_displayName forKey:@"displayName"];
	[coder encodeObject:_libreGraphQuickLink forKey:@"libreGraphQuickLink"];
}

// occgen: type debug description
- (NSString *)description
{
	return ([NSString stringWithFormat:@"<%@: %p%@%@%@%@%@>", NSStringFromClass(self.class), self, ((_type!=nil) ? [NSString stringWithFormat:@", type: %@", _type] : @""), ((_expirationDateTime!=nil) ? [NSString stringWithFormat:@", expirationDateTime: %@", _expirationDateTime] : @""), ((_password!=nil) ? [NSString stringWithFormat:@", password: %@", _password] : @""), ((_displayName!=nil) ? [NSString stringWithFormat:@", displayName: %@", _displayName] : @""), ((_libreGraphQuickLink!=nil) ? [NSString stringWithFormat:@", libreGraphQuickLink: %@", _libreGraphQuickLink] : @"")]);
}

// occgen: type protected {"locked":true}


// occgen: type end
@end

