//
// GAODataErrorMain.m
// Autogenerated / Managed by ocapigen
// Copyright (C) 2022 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2022, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

// occgen: includes
#import "GAODataErrorMain.h"
#import "GAODataErrorDetail.h"

// occgen: error include {"locked":true}
#import "NSError+OCError.h"

// occgen: type start
@implementation GAODataErrorMain

// occgen: type serialization
+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GAODataErrorMain *instance = [self new];

	GA_SET_REQ(code, NSString, Nil);
	GA_SET_REQ(message, NSString, Nil);
	GA_SET(target, NSString, Nil);
	GA_SET(details, GAODataErrorDetail, NSArray.class);
	GA_SET(innererror, NSDictionary, Nil);

	return (instance);
}

// occgen: type protected {"locked":true}
- (NSError *)nativeError
{
	NSError *error = [NSError errorWithDomain:OCErrorDomain code:OCErrorRequiredValueMissing userInfo:@{
		@"gaError" : self
	}];

	return (error);
}

// occgen: type native deserialization
+ (BOOL)supportsSecureCoding
{
	return (YES);
}

- (instancetype)initWithCoder:(NSCoder *)decoder
{
	if ((self = [super init]) != nil)
	{
		_code = [decoder decodeObjectOfClass:NSString.class forKey:@"code"];
		_message = [decoder decodeObjectOfClass:NSString.class forKey:@"message"];
		_target = [decoder decodeObjectOfClass:NSString.class forKey:@"target"];
		_details = [decoder decodeObjectOfClasses:[NSSet setWithObjects: GAODataErrorDetail.class, NSArray.class, nil] forKey:@"details"];
		_innererror = [decoder decodeObjectOfClass:NSDictionary.class forKey:@"innererror"];
	}

	return (self);
}

// occgen: type native serialization
- (void)encodeWithCoder:(NSCoder *)coder
{
	[coder encodeObject:_code forKey:@"code"];
	[coder encodeObject:_message forKey:@"message"];
	[coder encodeObject:_target forKey:@"target"];
	[coder encodeObject:_details forKey:@"details"];
	[coder encodeObject:_innererror forKey:@"innererror"];
}

// occgen: type debug description
- (NSString *)description
{
	return ([NSString stringWithFormat:@"<%@: %p%@%@%@%@%@>", NSStringFromClass(self.class), self, ((_code!=nil) ? [NSString stringWithFormat:@", code: %@", _code] : @""), ((_message!=nil) ? [NSString stringWithFormat:@", message: %@", _message] : @""), ((_target!=nil) ? [NSString stringWithFormat:@", target: %@", _target] : @""), ((_details!=nil) ? [NSString stringWithFormat:@", details: %@", _details] : @""), ((_innererror!=nil) ? [NSString stringWithFormat:@", innererror: %@", _innererror] : @"")]);
}

// occgen: type end
@end

