//
// GAThumbnailSet.m
// Autogenerated / Managed by ocapigen
// Copyright (C) 2024 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2024, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

// occgen: includes
#import "GAThumbnailSet.h"
#import "GAThumbnail.h"

// occgen: type start
@implementation GAThumbnailSet

// occgen: type serialization
+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GAThumbnailSet *instance = [self new];

	GA_MAP(identifier, "id", NSString, Nil);
	GA_SET(large, GAThumbnail, Nil);
	GA_SET(medium, GAThumbnail, Nil);
	GA_SET(small, GAThumbnail, Nil);
	GA_SET(source, GAThumbnail, Nil);

	return (instance);
}

// occgen: struct serialization
- (nullable GAGraphStruct)encodeToGraphStructWithContext:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GA_ENC_INIT
	GA_ENC_ADD(_identifier, "id", NO);
	GA_ENC_ADD(_large, "large", NO);
	GA_ENC_ADD(_medium, "medium", NO);
	GA_ENC_ADD(_small, "small", NO);
	GA_ENC_ADD(_source, "source", NO);
	GA_ENC_RETURN
}

// occgen: type native deserialization
+ (BOOL)supportsSecureCoding
{
	return (YES);
}

- (instancetype)initWithCoder:(NSCoder *)decoder
{
	if ((self = [super init]) != nil)
	{
		_identifier = [decoder decodeObjectOfClass:NSString.class forKey:@"identifier"];
		_large = [decoder decodeObjectOfClass:GAThumbnail.class forKey:@"large"];
		_medium = [decoder decodeObjectOfClass:GAThumbnail.class forKey:@"medium"];
		_small = [decoder decodeObjectOfClass:GAThumbnail.class forKey:@"small"];
		_source = [decoder decodeObjectOfClass:GAThumbnail.class forKey:@"source"];
	}

	return (self);
}

// occgen: type native serialization
- (void)encodeWithCoder:(NSCoder *)coder
{
	[coder encodeObject:_identifier forKey:@"identifier"];
	[coder encodeObject:_large forKey:@"large"];
	[coder encodeObject:_medium forKey:@"medium"];
	[coder encodeObject:_small forKey:@"small"];
	[coder encodeObject:_source forKey:@"source"];
}

// occgen: type debug description
- (NSString *)description
{
	return ([NSString stringWithFormat:@"<%@: %p%@%@%@%@%@>", NSStringFromClass(self.class), self, ((_identifier!=nil) ? [NSString stringWithFormat:@", identifier: %@", _identifier] : @""), ((_large!=nil) ? [NSString stringWithFormat:@", large: %@", _large] : @""), ((_medium!=nil) ? [NSString stringWithFormat:@", medium: %@", _medium] : @""), ((_small!=nil) ? [NSString stringWithFormat:@", small: %@", _small] : @""), ((_source!=nil) ? [NSString stringWithFormat:@", source: %@", _source] : @"")]);
}

// occgen: type protected {"locked":true}


// occgen: type end
@end

