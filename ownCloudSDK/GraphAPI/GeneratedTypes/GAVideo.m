//
// GAVideo.m
// Autogenerated / Managed by ocapigen
// Copyright (C) 2024 ownCloud GmbH. All rights reserved.
//

/*
 * Copyright (C) 2024, ownCloud GmbH.
 *
 * This code is covered by the GNU Public License Version 3.
 *
 * For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 * You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.
 *
 */

// occgen: includes
#import "GAVideo.h"

// occgen: type start
@implementation GAVideo

// occgen: type serialization
+ (nullable instancetype)decodeGraphData:(GAGraphData)structure context:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GAVideo *instance = [self new];

	GA_SET(audioBitsPerSample, NSNumber, Nil);
	GA_SET(audioChannels, NSNumber, Nil);
	GA_SET(audioFormat, NSString, Nil);
	GA_SET(audioSamplesPerSecond, NSNumber, Nil);
	GA_SET(bitrate, NSNumber, Nil);
	GA_SET(duration, NSNumber, Nil);
	GA_SET(fourCC, NSString, Nil);
	GA_SET(frameRate, NSNumber, Nil);
	GA_SET(height, NSNumber, Nil);
	GA_SET(width, NSNumber, Nil);

	return (instance);
}

// occgen: struct serialization
- (nullable GAGraphStruct)encodeToGraphStructWithContext:(nullable GAGraphContext *)context error:(NSError * _Nullable * _Nullable)outError
{
	GA_ENC_INIT
	GA_ENC_ADD(_audioBitsPerSample, "audioBitsPerSample", NO);
	GA_ENC_ADD(_audioChannels, "audioChannels", NO);
	GA_ENC_ADD(_audioFormat, "audioFormat", NO);
	GA_ENC_ADD(_audioSamplesPerSecond, "audioSamplesPerSecond", NO);
	GA_ENC_ADD(_bitrate, "bitrate", NO);
	GA_ENC_ADD(_duration, "duration", NO);
	GA_ENC_ADD(_fourCC, "fourCC", NO);
	GA_ENC_ADD(_frameRate, "frameRate", NO);
	GA_ENC_ADD(_height, "height", NO);
	GA_ENC_ADD(_width, "width", NO);
	GA_ENC_RETURN
}

// occgen: type native deserialization
+ (BOOL)supportsSecureCoding
{
	return (YES);
}

- (instancetype)initWithCoder:(NSCoder *)decoder
{
	if ((self = [super init]) != nil)
	{
		_audioBitsPerSample = [decoder decodeObjectOfClass:NSNumber.class forKey:@"audioBitsPerSample"];
		_audioChannels = [decoder decodeObjectOfClass:NSNumber.class forKey:@"audioChannels"];
		_audioFormat = [decoder decodeObjectOfClass:NSString.class forKey:@"audioFormat"];
		_audioSamplesPerSecond = [decoder decodeObjectOfClass:NSNumber.class forKey:@"audioSamplesPerSecond"];
		_bitrate = [decoder decodeObjectOfClass:NSNumber.class forKey:@"bitrate"];
		_duration = [decoder decodeObjectOfClass:NSNumber.class forKey:@"duration"];
		_fourCC = [decoder decodeObjectOfClass:NSString.class forKey:@"fourCC"];
		_frameRate = [decoder decodeObjectOfClass:NSNumber.class forKey:@"frameRate"];
		_height = [decoder decodeObjectOfClass:NSNumber.class forKey:@"height"];
		_width = [decoder decodeObjectOfClass:NSNumber.class forKey:@"width"];
	}

	return (self);
}

// occgen: type native serialization
- (void)encodeWithCoder:(NSCoder *)coder
{
	[coder encodeObject:_audioBitsPerSample forKey:@"audioBitsPerSample"];
	[coder encodeObject:_audioChannels forKey:@"audioChannels"];
	[coder encodeObject:_audioFormat forKey:@"audioFormat"];
	[coder encodeObject:_audioSamplesPerSecond forKey:@"audioSamplesPerSecond"];
	[coder encodeObject:_bitrate forKey:@"bitrate"];
	[coder encodeObject:_duration forKey:@"duration"];
	[coder encodeObject:_fourCC forKey:@"fourCC"];
	[coder encodeObject:_frameRate forKey:@"frameRate"];
	[coder encodeObject:_height forKey:@"height"];
	[coder encodeObject:_width forKey:@"width"];
}

// occgen: type debug description
- (NSString *)description
{
	return ([NSString stringWithFormat:@"<%@: %p%@%@%@%@%@%@%@%@%@%@>", NSStringFromClass(self.class), self, ((_audioBitsPerSample!=nil) ? [NSString stringWithFormat:@", audioBitsPerSample: %@", _audioBitsPerSample] : @""), ((_audioChannels!=nil) ? [NSString stringWithFormat:@", audioChannels: %@", _audioChannels] : @""), ((_audioFormat!=nil) ? [NSString stringWithFormat:@", audioFormat: %@", _audioFormat] : @""), ((_audioSamplesPerSecond!=nil) ? [NSString stringWithFormat:@", audioSamplesPerSecond: %@", _audioSamplesPerSecond] : @""), ((_bitrate!=nil) ? [NSString stringWithFormat:@", bitrate: %@", _bitrate] : @""), ((_duration!=nil) ? [NSString stringWithFormat:@", duration: %@", _duration] : @""), ((_fourCC!=nil) ? [NSString stringWithFormat:@", fourCC: %@", _fourCC] : @""), ((_frameRate!=nil) ? [NSString stringWithFormat:@", frameRate: %@", _frameRate] : @""), ((_height!=nil) ? [NSString stringWithFormat:@", height: %@", _height] : @""), ((_width!=nil) ? [NSString stringWithFormat:@", width: %@", _width] : @"")]);
}

// occgen: type protected {"locked":true}


// occgen: type end
@end

